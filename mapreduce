import threading
import re

def mapper(file_name):
    with open(file_name, 'r') as file:
        word_count = {}
        for line in file:
            words = re.findall(r'\w+', line.lower())
            for word in words:
                if word in word_count:
                    word_count[word] += 1
                else:
                    word_count[word] = 1
        return word_count

def reducer(mapper_results):
    final_word_count = {}
    for result in mapper_results:
        for word, count in result.items():
            if word in final_word_count:
                final_word_count[word] += count
            else:
                final_word_count[word] = count
    return final_word_count

class MapReduceThread(threading.Thread):
    def __init__(self, func, args):
        threading.Thread.__init__(self)
        self.func = func
        self.args = args

    def run(self):
        self.result = self.func(*self.args)

    def get_result(self):
        return self.result

def main():
    # Define the files to be processed
    files = ['file1.txt', 'file2.txt', 'file3.txt']

    # Create mapper threads
    mapper_threads = []
    for file in files:
        thread = MapReduceThread(mapper, [file])
        mapper_threads.append(thread)
        thread.start()

    # Wait for mapper threads to finish and get results
    mapper_results = []
    for thread in mapper_threads:
        thread.join()
        mapper_results.append(thread.get_result())

    # Create reducer thread
    reducer_thread = MapReduceThread(reducer, [mapper_results])
    reducer_thread.start()
    reducer_thread.join()

    # Print the final word count
    print(reducer_thread.get_result())

if __name__ == '__main__':
    main()
